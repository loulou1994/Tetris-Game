{"version":3,"sources":["src/types&declarations.ts","src/utils.ts","src/tetrisBoard.ts","src/tile.ts","src/currentPiece.ts","src/inputHandler.ts","src/piecesController.ts","src/index.ts"],"names":[],"mappings":";;;;;;AKEA,ACFA,AJCA,ACDA,AH2BA,AC1BA,IICA,ACFA,AJCA,ACDA,AFCA,KICA,GAAA,KJDA,GAAA,IKDA,AJCA,ACDA,CEEA,ECFA,AJCA,ACDA,AFCA,CAAA,MKDA,AJCA,ACDA,CGAA,AJCA,ACDA,EEEA,MJDA,CAAA,aKDA,AJCA,ACDA,CGAA,AJCA,ACDA;AGMA,AJJA,ACDA,AH2BA,ACxBA,EIDE,ECGF,AJJA,ACDA,AH2BY,KCxBI,EIDd,ACGF,AJJA,GIIA,AJJA,CF8BC,CK7BC,CAAY,AFFd,GAAA,AFG2B,CIDH,ACGxB,AJJA,ADE+B,CKE/B,AJJA,CGCwB,GJCiB,CEHzC,CAAA,AFGyC,GKEzC,AJJA,CIIA,AJJA,WCDA,CAAA;AGOa,AJJb,ACDA,AHyBA,CAAA,CCvBE,EIDE,AFDJ,GGKa,CAAA,AHLb,CFES,CIDC,CAAC,AFDX,AHyBY,GCvBE,CKGM,ALHL,GKGuB,CLHnB,CAAC,EDuBG,EGzBvB,AHyBuB,CCvBE,CAAC,CIDC,CAAC,EJCE,CAAC,KEF/B,CECqC,AJCA,CAAA,CIDE,AJCA,GAAG,KAAK,CAAC,CIDR,CAAC,EAAA,EJCa,CAAC,CAAC;ACA3C,ADCb,EKGE,AH+HA,AH3GA,IKxBI,CCIC,AJJM,CAAA,CIIJ,CACL,CACE,AH6HJ,CG7HK,CAAC,ANkBN,CKxBY,ALwBZ,CKxBa,ACML,AH6HR,CEnIc,ACML,AH6HG,CG7HF,AJNU,ACmIC,EEnIJ,ACOb,AH4HmB,CG5HlB,AJPkB,ACmIS,CG5H1B,ANiBN,CExByB,ACmIS,AH3GlC,CMjBQ,CAAC,CAAC,ANiBV,EMhBI,AH2HiD,CG3HhD,CAAC,AH2H+C,EG3H7C,CAAC,ANgBM,CMhBL,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CACP,EACD,CACE,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CACR,EACD,CACE,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACT,EACD,CACE,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CACP,EACD,CACE,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CACR,CACF;AJlCU,ADFb,EKqCE,ANXA,CMWC,CHgGC,CGhGC,CACD,CACE,AJrCO,ADFb,CIEQ,ACqCD,AJrCM,ACmIL,AFrIR,CKuCQ,AH8FC,CAAC,CG9FA,CAAC,CDrCE,ACqCD,AH8FC,AH3GX,CG2GY,AH3GZ,CMcI,CAAC,CAAC,ANdN,CMcO,ANdP,CC1BF,CKwCW,AJtCc,CIsCb,ANdV,CMcW,ALxCb,CCE4B,CIuCtB,ANfG,CKxBgB,ACuClB,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,AL1CN,CK0CO,CAAC,EAAE,CAAC,CAAC,CACP,EACD,CACE,AJ3CsB,CI2CrB,AJ3CqB,CI2CpB,CAAC,EAAE,CAAC,CAAC,AJ3CqB,CAAC,CI4C7B,CAAC,CAAC,EAAE,AJ5C8B,CI4C7B,CAAC,CJ5C+B,CI6CrC,CAAC,CAAC,EAAE,CAAC,CAAC,AJ7C+B,CAAA,CI8CrC,CAAC,CAAC,EAAE,CAAC,CAAC,CACP,CJ/C+C,CIgDhD,CACE,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CACP,EACD,CACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACR,EACD,CACE,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CACP,CACF;AJjEU,ADAb,EKkEE,AN1CA,CM0CC,CHiEC,CGjEC,CACD,CACE,AJpEO,CGAL,ACoED,AJpEM,ACmIL,CG/DA,AH+DC,CAAC,CG/DA,CAAC,CDpEE,ACoED,AH+DC,AH3GX,CG2GY,AH3GZ,CM6CI,CAAC,CAAC,AJrEc,AFwBpB,CAAA,CM6CQ,CAAC,AJrEc,CIqEb,AN7CV,CM6CW,EDrEW,ACsElB,AN9CG,CM8CF,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACR,CAAC,CAAC,CAAC,EAAE,CAAC,AJvEa,CIuEZ,AJvEY,CIwEpB,KJxE0B,CAAC,MAAM,GAAG,OAAA,CAAA,SAAS;AAElD,AFuBA,ACxBA,CKyEC,ANjDA,EAJW,CEnBZ,ACkII,IEnII,AFmIA,CDlIR,ACkIS,AFnIA,GCCT,CGDa,CFmIC,AH/GS,GG+GN,AH/GL,KG+GU,EEnIE,ALoBZ,ACpBY,CCCxB,AFmBY,ACpBa,GAA6B,EAAA,MDoB/B,CEnBvB,IFmBY,OAAA,CAAA,WAAW,GAAA,CAAA,CAAA,CAAA,CAAA;AMuDV,ANlDA,EElBX,AC6HA,AFnIA,GAAG,CAAC,CK0EO,ANlDA,CKxBL,AC0EK,ANlDA,GElBX,EGNW,CC0EM,CL1EJ,CIAC,AHMd,CIoEmC,AJpEvB,CDNI,IDwBS,GElBG,AFkBA,EElBA,EDND;EK2E3B,AH5EA,AH0BA,ACxBA,ECEA,CDFG,CEFH,AFEI,CK0EC,AH5EL,CEEM,AHEN,CIwEO,AJxEP,EFsBS,EKxBE,ALwBA,CEtBN,ADFO,CAAC,CIAC,AFFd,AFEc,CCEN,ACJR,CDIS,ADFO,CAAC,EAAE,GAAG,CAAC,GEFZ,GAAX,AFE6B,CAAC,KAAK,EAAE,EEFzB,CAAa,AFEe,CAAC,CEFhB,KFEsB,CAAC,MAAM,CAAC;AGVzD,AGAA,ENWE,EGXF,AGAA,ADqFI,AJxEF,ACLY,AH0BA,CCvBT,CDuBW,ACvBV,ECEJ,ACLY,AH0BI,CErBhB,ACLY,AH0BK,CKvBT,AJAA,GAAI,CIAA,AC0EA,AH7EA,CEGC,CC0EC,CFrFhB,AEsFM,CACE,CD5EW,AC4EV,AJ1EG,ACLE,CCRd,ACWoB,AC4EV,AH/EI,EG+EF,AJ1EG,ACLD,CG+ED,AJ1EG,CKbhB,CDuFe,CAAC,CFvFhB,AGAA,ADuFiB,CFvFjB,CEwFQ,CAAC,CD7EsB,AC6ErB,CD7EsB,CC6EpB,CCxFZ,ADwFa,CCxFb,CDwFe,AL7EsB,CK6ErB,CAAC,ED7EuB,AC8EhC,CD9EiC,AC8EhC,CD9EiC,AC8EhC,CFzFV,ACW2C,CDX3C,AEyFY,CAAC,CD9EiC,CAAC,AC8EhC,CAAC,CD9EiC,AC8EhC,CACV,EACD,CDhF+C,ACiF7C,CDjF8C,ACiF7C,CAAC,EC5FV,AD4FY,CC5FZ,AD4Fa,EAAE,CAAC,CAAC,EACT,CDlFyD,ACkFxD,CDlFyD,ACkFxD,EAAE,CAAC,CDlFyD,CAAC,ACkFxD,CDlFyD,ACkFxD,CDlFyD,ACkFxD,EACT,CDnFoE,ACmFnE,CDnFoE,ACmFnE,EAAE,CAAC,EAAE,CAAC,CAAC,CACV,EACD,CACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV,EACD,CACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV,EACD,CACE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV,CACF;AF9GL,AGQA,ENGE,EGXF,AGQA,ADuGI,AJhGA,AFkBiB,CCtBhB,CEJS,AH0BS,ACtBjB,CEJQ,CGwGN,AJhGA,AFkBiB,CElBhB,AFkBiB,CIjC1B,ACWU,ACoGA,AHxGI,AH0Ba,CG1BA,CDQf,CEfZ,EFee,ADJA,CCIA,CKPf,ALOe,CDJG,CCIH,CEff,AGQA,CHRA,KFee,ADJW,CMH1B,ALOe,CKPf,CHRA,CAAA,KFeuB,EAAA,CAAE,KKPzB,CAAA;AHFA,AGGA,ENGE,CKoGC,CF1GH,AGGA,ALOI,ACTuB,AH0BE,CCrBxB,CDqB0B,ACrBzB,EIAE,AHIA,AFiByB,CEjBxB,AFiByB,EI3BlC,GAAA,CHMe,ECIE,CKPjB,ANGkB,ECIE,CEVpB,AGGA,CHHA,EHMwB,IMHxB,ALO4B,CKP5B,EHHA,CAAA,aGGA,CAAA;AHDA,AGEA,EDuGE,AJhGA,ADJA,CKoGC,CFzGH,AGEA,AJFI,AHyBgC,CMgF/B,ALpGA,CDoBiC,ACpBhC,EELE,AHyBgC,CIzBxC,ADAS,CEKC,AFLA,ECAV,EDAc,AFKA,CELC,AFKA,GMHf,GAAA,IHFA,EHK2B,CMH3B,CAAA,ANG6B,GAAG,CAAC,IGLjC,EHKuC,CAAC,KMHxC,ANG6C,CMH7C,ENGgD,CAAC,GAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAC,CAAC,CAAC;AMF7E,EHME,AFEA,ACVA,AHwBuC,ACnBvC,CELC,AHwBuC,COtB1C,ADuGI,CLpGC,CAAC,CCKJ,CAAA,GEFA,AGNF,GAAA,ADuGc,CLpGC,CGGb,AEiGc,CFhGZ,AEiGE,AJhGJ,CIgGK,AJhGL,ADLgB,CKqGV,ECxGR,ADwGU,CCxGV,ADwGW,AJhGL,EIgGO,ALrGW,CKqGV,AJhGZ,CIgGa,EACT,CFlGsB,AEkGrB,CAAC,CFjGJ,AGRJ,CAAA,ADyGU,CAAC,EAAE,AJjGN,CIiGO,CAAC,CFjGU,AFAW,CIkG9B,CFjGF,AEiGG,AJlG6B,CIkG5B,EAAE,CAAC,CFjGY,CEiGV,CFhGT,AEgGU,CAAC,CACV,WFjGoB,EACrB,KAAmB,EAAA;AGVvB,EJFE,AHwBA,ACnBA,EGSE,AGZJ,AFGI,ACwGA,AJpGF,CGJG,AJAA,CIAC,AFLJ,AFKI,CELJ,CCcM,AE+FA,AJpGN,CEKO,CE+FC,GJpGR,CEKY,AHTA,CAAC,CCIb,ACTA,CCce,ADdf,EHwBiB,CEfjB,CFemB,CIVC,AGZtB,GAAA,EJFY,AFKe,EAAE,CEL3B,EIEF,ANGgC,CMHhC,ANGiC,MAAM,CEL1B,AFK2B,CELb,EAAA,EFKkB,GAAG,CAAC,EAAE,EMHnD,CAAA,ANGsD,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AMDzE,ANEA,GKwGG,CF/FC,AGXJ,AFEI,AHIA,ACVS,AHwBS,EAAE,EIThB,AGXR,AJJa,AHwBa,CITjB,ADfI,AHwBc,CKlBjB,CEFV,AFEW,GFNE,KAAA,CAAA,CCeQ,CDfR,ECeW,AGXxB,GFE2B,CAAC,OAAO,CDSC,AGXpC,CFEqC,UAAC,CAAC,EAAA;AJCvC,EMqHE,ADbA,CAAC,CF/FC,AFLA,AFayB,CMuFxB,CDxGC,AFPO,AHwBkB,CEbxB,ACXM,CCgBL,AFLA,AFayB,CIRxB,AJQyB,CGxBrB,CI4HX,AJ5HwB,CAAC,EEOb,CEqHZ,AFrHa,CDSC,AG6GZ,AFtHY,CHIC,EEKE,AG6Gc,AFtHd,CHIC,CKmHhB,KH9GsB,GFLG,CKmHU,EACnC,KAAY,EACZ,QAAgB,EAAA;ANxHpB,IGSI,AGNF,ADqGE,AJpGA,ACZuB,AHwBS,EAAE,CEZ/B,CEKC,AGNN,AFHM,AHIA,AFYgC,CIP/B,AGNP,APauC,AChBzB,CDgB0B,GKhB7B,CCwGC,EAAE,AJpGA,CIqGV,AJrGW,CIqGV,AJrGW,CIqGV,CFhGY,AGNP,ALCO,CIqGV,AJrGW,CIqGV,CFhGY,AGNG,ALCH,CIqGV,ALzGkB,CMGH,AFHH,ACyGX,ALzGkB,CKyGjB,AJrGW,CEKC,AFLA,CEKC,AEiGtB,CAAC,CAAC,EAAE,CAAC,AJtGsB,CAAC,CIsGrB,CAAC,AL1GmC,CGSZ,AEiGtB,CFjGsB,AHTY,CGSV,AEkGjC,AJvGiC,CIuGhC,CAAC,AJvGiC,EIuG/B,CAAC,AJvGiC,CAAC,CIuGhC,CAAC,CAAC,CACV,EJxG8C,CAAC,MAAM,CAAC;EDHzD,EGSE,AGFF,ADqGE,AJvGA,ACbA,AHuBwC,EAAE,ACfxC,EGSE,AGFN,AFPM,AC4GA,AHpHA,AHuBwC,CINvC,AGFP,AJfO,CGoHC,AHpHA,GEQG,CFRC,CAAC,KCiBK,CGFN,ANPO,EGSE,CGFN,AFPO,AJAA,CAAC,EGSE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,AGF3B,CHE4B,AGF5B,OAAO;EJdtB,AHsB+C,ACd/C,CERC,CCiBC,AGDF,ALHE,GAAG,CEIC,AGDN,AFRM,AHKA,CEIC,AGDP,ENRS,EIAE,IHKI,CDLC,CAAC,CCKC,EEIE,CGDN,CFRQ,CDSC,CGDN,ALHO,CKGN,CNRgB,EAAA,QGSE;CEoGrC,AN9FA,CGtBC,ECiBE,AG8GA,ALlHA,ADLA,EERF,CAAA,CCiBM,AG8GA,AFvHA,AJAE,CGSD,AG8GA,ALlHA,GKkHG,CFvHC,AHKA,CEIC,AFJA,CKkHC,CFvHC,AFRd,CCiBe,AFJA,ACbf,CI+HgB,ALlHA,CDLG,CCKD,CAAC,CEIC,AHTE,GCKC,IAAI,ACbf,CDagB,CDLG,CER/B,CDa+B,CAAC,ADLE,CCKD,CAAC,CAAC,KCbtB,CDa4B,ACbf,EDaiB,ACbjB,EDamB,CAAC,CDLG,CCKD;AIyGlD,ANrFa,EIfX,EG8GE,AJhIW,AFSX,ECKE,CFmBO,CO+FL,AFvHA,AFTO,AHiCF,CO+FJ,ADVO,AHtHD,CDcH,CAAC,EGLA,CHML,ACfO,AHiCI,CElBV,CGNO,CLwBM,CO+FJ,ALjHN,CCfG,AFSI,CETJ,CIgIM,CDVQ,AJvGb,ACfD,AFSO,CK6GO,AJvGZ,EIuGY,ANrFC,CAAC,IO+FD,CLjHL,ADNM,GCMH,IAAI,CAAC,CFkBY,CAAC,QElBH,AFkBW,CAAsB,GElB7B,CAAC,GACpC,CAAC,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,GACnC,CAAC;AFiBA,EIdX,AEmGA,ECUE,ANvHA,EK6GI,AJrGF,AClBS,CCoBb,ADpBa,AHkCF,CIdX,AG6GM,AP/FK,CO+FJ,AL/GA,CGRC,AHQA,AClBK,CAAa,GIiId,AFvHA,CJAC,CAAC,CGUd,AG6Ge,AP/FK,CIdpB,ACVgB,AHQA,CGRC,AHQA,CAAC,AFgBK,EO+FH,AL/GA,ADRA,CK6GG,AJrGF,ADRA,ECQE,CIqGG,CFnGjB,AEmGiB,CAAA,ANrFK,CEhBJ,AFgBK,CIdhC,ACV4B,AC6GF,AJrGE,CGRC,GJAG,CAAC,EK6GP,CAAA,CD7GW,CAAC,AHQA,CGRC,CDUvC,ACVwC,AHQA,CFgBM,CAAC,CKxBJ,AHQA,CGRC,AHQA,EGPlC,CC4G2B,EAAC,CD5GxB,AHOoC,CGPnC,AHOoC,EFgBO,CAAsB,CMqFpC,CAAC,CJrGY,CAAC,EIqGT,CAAC,CD5GxB,CAAC,MAAM,CAAC,IAAI,CAAC,MC4GW,CAAA,ID5GA,CAAC,MC4GU,CD5GH,AC4GI,CD5GH,AC4GI,CD5GH,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;ALwB1D,EMqFX,EFpGA,AG8GE,AJlIwB,AFWxB,EK6GI,CNrFK,CIfX,AG8GM,AP/FK,ACxBL,CMuHC,ANvHA,CICC,GDQR,CG8GY,EH9GZ,CG8GY,CDVM,ANrFG,EIfrB,AHTkB,CK6GG,ANrFG,ACxBL,CMuHA,MDVE,ANrFG,CMqFH,ANrFG,ACxBG,EAAE,IDwBC,CO+FX,ADVS,ANrFG,CO+FZ,ADVU,KCUL,CAAA,GP/FiB,CO+FjB,AP/FkB,CO+FlB,GP/FsB,CAA6B,CO+FnD,CAAL,ADV2B,CAAC,aCU5B,CAAA,KAAK,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EACjB,CAAA,CAAA,EAAA,kBAAA,CAAA,aAAa,EAAA,CAAE,EAAA,KAAA,CAAA,EAAA,CAClB,IAAI,CAAC,KAAK,CAAC,GAAG,EACd,CAAC,EACD,CAAA,CAAA,EAAA,OAAA,CAAA,eAAe,EAAC,oBAAA,CAAA,cAAc,CAAC,CAAA,EAAA,KAAA,CAAA,CAAA,EAAA,CAChC;APnGQ,EMqFX,EFpGE,AGmHA,ALpHA,ACnBA,EGwHE,AL7GA,CDwBO,COoGL,AF3HA,AFZA,AHmCK,COoGJ,ALpHA,ACnBA,CAAC,CCoBC,EFDE,CAAC,ACnBA,CCoBC,ADpBA,CCoBC,CEoGC,AJrGA,ADRA,CM4HC,ALpHA,ADRA,EK6GE,AJrGA,AFgBK,COoGJ,ALpHA,CKoHA,AN5HC,CM4HD,APpGO,ACxBN,CAAE,CM4HH,ALpHI,EIqGL,CFpGQ,AEoGR,CFpGS,AFDA,CAAC,AFgBF,CAAA,CIfI,CAAC,AFDA,CIqGP,AJrGQ,CIqGP,KJrGa,AFgBH,CAAC,CEhBI,CECR,AGmHb,CAAA,ALpHuB,CAAC,CECR,CFDU,CECR,GJeS,CMqFJ,ANrFK,CMqFJ,GFpGE,AJeM,COoGnB,APpGgD,CIfnC,CGmHb,CAAE;APnGvB,EMsFX,AHzHA,CAAC,CIuIC,EHnHE,AEqGA,AJtGA,ADRA,CDwBO,COoGL,APpGK,COoGJ,CF3HC,AHOE,CAAC,EECA,CFAL,CAAC,AFeW,CIfJ,CAAC,AEqGA,AL9GA,CK8GC,AJrGN,AFeW,ACxBL,CM4HC,CHnHC,CAAC,CGmHC,ADdA,AJrGN,CAAC,GKmHS,APpGK,CMsFJ,ANtFK,IIfV,AFAG,CDTO,ECSJ,CDTO,EGSP,CFAI,CEAF,AFAG,CKmHP,CAAA,APpGoB,CAAC,EMsFH,ECcb,ADde,CFrGR,AGmHN,EHnHM,AFAK,AFeW,CAAoB,COoGtC,CAAC,CLnHU,CAAC,EDTQ,CCU5C,ADV6C,CCU5C,GAAG,GDVgD,CCU5C,ADV6C,CCU5C,QAAQ,GAAG,IAAI,CAAC,UAAU,GACnC,CAAC;AFcA,EGnCX,EIuIE,ADdA,CL9GC,CCWC,ACtBJ,CAAA,AHmCW,CIfL,AGmHA,APpGK,COoGJ,ALjHA,CAAC,CImGC,AL9GD,CGSE,AEqGA,CAAA,CAAA,EAAA,AHzHV,AHmCmB,CGnCnB,CCoBgB,AFEA,CAAC,AFaK,CIfJ,AFEA,EAAE,CImGV,AJnGW,CImGX,CJnGa,CCtBd,AFWc,CDwBO,ACxBN,CM4HE,ALjHA,AFaK,CEbJ,ACtB3B,EIuI6B,IAAI,ADdZ,AJnGY,CAAC,CImGZ,CCcc,AN5HD,CM4HE,AJvI3B,AFW0B,CEXb,CDsBgB,CCtBhB,AHmCsB,ACxBN,CCWE,AFaK,ACxBN,ICWK,CImGZ,AJnGa,CImGZ,CNtFmB,CAAsB,OEbnB,CImGZ,AJnGa,CImGZ,EAAE,YAAY,CAAC;ANjFjD,EC5BX,EM4HE,AF3HA,AFbQ,CEaP,CAAC,CL2BO,COgGL,AJxII,AHwCC,COgGJ,AJxIG,CCqBF,IDrBE,GCqBK,EDrBL,CAAA,CCqBS,CDrBT,AHwCe,GOgGF,APhGc,CAAC,CInBnB,CAAA,AGmHO,CPhGe,EAAC,CInBnB,AGmHO,CHlHpB,CJkBmC,COgGZ,CPhGa,CIlBhC,CAAC,CJkBkC,COgGX,CPhGY,EIlB9B,CAAC,AJkBgC,EAAC,GAAG,EAAC,GAAG,EAAC,CIlBzC,CAAA,CJkB4C,EAAC,GAAG,EAAC,GAAG,CIlBxC,CJkByC,EIlBtC,CAAC,AJkBwC,CIlBvC,CJkBwC,EIlBrC,CJkBwC,EAAC,GAAG,EIlBpC,AJkBqC,GIlBlC,AJkBqC,CIlBpC,CJkBqC,CIjBhF,EJiBmF,EAAC,GAAG,CIjB/E,CJiBgF,EIjB7E,CAAC,AJiB+E,CAAC,CIhB5F,KAAI,CAAC,KAAK,CACX;ECXT,AC6GA,AL9GA,EM4HE,ALhHA,ECzBQ,CAAA,CIyIJ,ALhHA,CKgHC,ADdA,AJlGA,ADZA,CK8GC,AH3HE,AFaF,CEbe,AFad,CCYC,ADZA,CCYC,OAAO,CIkGC,AJlGA,CIkGC,GCcG,GAAG,CAAC,ELhHP,CIkGU,EAAE,AJlGT,EAAA,UIkGqB,CAAC;AAC/C,AL9GA,EICA,EE2HI,AJ1IqB,ED0BnB,EECE,AG+GA,CAAC,AF3HT,AHWS,CAAC,IGXT,CDYc,CAAC,CFDC,CAAC,QKgHQ,ELhHP,CKgHU,CAAC,ILhHL,EAAA;AGXzB,ACoGA,ALjHA,CIjBA,CAAA,CAAA,CE0JI,AJ1IA,EC2BE,CAAC,AEuFP,ALjHA,CG0BQ,AG+GA,ADxBR,AJxFQ,AC1BA,AFCR,CMyIS,AJ1IA,CAAC,ED0BE,EC1BE,CAAC,EI0IE,CLhHC,CAAC,CKgHC,CDxBpB,ELjHA,CKiHA,CCwByB,ALhHA,CDzBzB,CCyB2B,UIwF3B,ILjHA;AIjBa,AJ8Bb,EM6HE,AJ1IA,CAAC,CC2BC,CAAC,CAAiB,CC5CT,CAAA,EH2CH,GG3CG,AH2CA,CAAC,EG3CD,KAAA,EH2CU,GAAG,MAAM,CAAC,WAAW;ADZ5C,EGcE,AGhBA,AJXA,CC2BC,GGhBD,AJXA,CIWA,AJXA,EFac,CCaN,EDbS,CCaN,ADbO,CCaN,ADbe,EMF3B,AJXA,AFa6B,CMF7B,AJXA,AFasC,EAAA,GCalB,CKfd,ALgBI,GKhBV,AJXS,GD2BO,AC3BhB,CD2BiB,CAAC,GAAG,EKhBd,GLgBkB,AC3Bf,CD2BgB,AC3BP,EAAA,IIWM,EAAA,ALgBS,EACxB,MAAM,CAAC,CAAC,GAAG,KAAI,CAAC,QAAQ,EACxB,KAAI,CAAC,QAAQ,EACb,KAAI,CAAC,QAAQ,CACd;EEFT,AHfA,EMFE,AJXA,GC4BF,CAAA,AGjBM,CAAC,ANEA,CAAE,CEbA,AFaC,GAAG,CEbA,AFaC,CEbA,CC4Bd,AD5Be,CC4Bf,AHfkB,CAAC,CEbD,CAAC,EFaI,CEbD,AFaE,CMFD,IHiBZ,AGjBgB,GHiB3B,KD5BsB,CAAA,CIWe,KHiBrC,MD5BkC;AFcpC,EEbE,CAAC,CC4BC,AGjBA,ELoBE,CAAC,CEHC,AGjBA,ALoBA,CKpBC,QHiBQ,GAAG,IAAI,EGjBE,IAAI,UAAU;ANAxC,EEVE,EC4BE,AGhBA,ALmBA,CAAC,CAAC,AC/BJ,CAAA,AFUF,CMEQ,ANFR,CGkBS,EHlBT,CMEY,CHgBC,AGhBA,CHgBC,AHlBd,EEVE,CC4Be,AD5Bf,AFUF,CGkBkB,EAAE,CAAC,GAAG,CD5Bd,GC4BkB,AD5B1B,CC4B2B,AGhBA,IAAI,IAAI,CAAC,AJZ3B,CAAS,CC4BoB,CAAC,AD5BrB,MC4B2B,EAAE,EAAE,CAAC,EAAE,GGhBG,EAAE;ANC3D,ECmBE,CAAC,CC/BC,EC4BE,AGhBA,KHgBK,AD5BA,IC4BI,AD5BA,CC4BC,AD5BA,CAAC,EC4BE,CAAC,AD5BA,CAAC,CC4BC,CAAC,ED5BE,CC4BC,AD5BA,IC4BI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AHf3D,ECoBE,AChCA,CAAC,GIYG,CLoBJ,CEJM,AFIN,CDpBc,CMAN,EHgBE,EGhBE,CAAC,CHgBC,CAAC,AFIf,CAAA,MDpB6B,CAAC,CMAN,CAAC,CHgBC,CAAC,CAAC,CAAC,CAAC,AFIhB,ADpBgC,CGgBf,CAAC,AHhBgB,CMAf,ALoBjC,CKpBkC,CNAmB,EGgBhB,AGhBA,ANAkB,CGgBjB,AGhBA,EHgBE,AGhBA,ANAqB,EAAA,EMAjB,CAAC,ALoB7C,KKpBkD,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC;EJX1E,AFWgD,ECqB9C,EKpBE,AJZJ,AFWgD,CEXhD,CC4BM,CFIC,ADrByC,CMCxC,EHgBE,CAAE,AFID,CKpBC,ALoBA,ADrBoC,CMCnC,CJZb,CC4BgB,AFID,AChCf,CC4BiB,AFID,CDrBgC,CCqB9B,ADrB8B,CCqB7B,CDrB6B,ECqB1B,CChCd,CIYgB,CAAC,CLoBC,AChC1B,CC4B4B,AFID,CEJE,CAAC,CAAC,AFID,CEJE,AFID,CEJE,CAAU,AGhBV,CHgBW,AGhBV,EJZzB,CIY4B,ALoBA,AChCnB,CIYoB,CLoBC,AChCrB,CIYsB,CLoBC,CAAC,EKpBE,ALoBA,CKpBC,IHgBc,CAAC,AGhBV,CHgBW,AGhBV,CHgBW,EAAE,QGhBF,CAAC,KAAK,EAAE,IAAI,CAAC;IJXzE,AFU8C,EMG5C,ALmBA,CDtB4C,GGkBxC,AFIA,ADtBwC,CEVvC,AFU4C,IEVxC,CAAC,CAAC,CDgCC,CEJC,CD5BC,CDgCC,AChCA,CC4BC,ED5BE,CDgCC,EEJE,UD5BH,CAAA,SAAS;EAC/B,AFSqD,CETpD,GIaG,ALmBA,IEJI,AGfE,CLmBD,IAAI,CAAC,GAAW,CAAC,EAAE,CKnBL,ALmBM,GKnBH,ALmBM,IKnBF,ALmBM,CKnBL,ALmBM,GAAG,CAAC,CKnBL,ALmBM,CKnBL,ALmBM,CAAC,MAAM,EAAE,EKnBJ,ALmBM,CKnBN,ALmBO,CKnBL,CLmBO;EC/BzD,AFQuD,IMKnD,AJbJ,AFQuD,CERvD,CDgCM,CDxBiD,CMK/C,ELmBE,CAAC,CDxB4C,EERvD,CDgCe,AChCf,CDgCgB,CDxBuC,CAAA,CCwBpC,CAAC,ADxBmC,CMKlC,ALmBA,AChCf,CDgCgB,CKnBC,ALmBA,CAAC,AChCxB,CDgCyB,CAAC,MAAM,EAAE,AChC3B,CAAS,EAAA;IACd,AFOqD,GAAA,CMMjD,ELmBE,ADzB+C,CEP9C,CIaC,ANNmD,CMMlD,EJbE,CAAC,CAAC,CIaC,ALmBA,CKnBC,CJbC,CDgCC,AChCA,IAAI,CDgCC,AChCA,IIaI,CAAC,OAAO,CAAC,UAAC,GAAG,EAAA;EJZzC,AFM6D,CEN5D,OIaO,GAAG,CAAC,OAAO,CAAC,UAAC,MAAM,EAAA;EJZ3B,AFMA,EGsBE,ED5BF,AFMI,CENJ,EFMO,EGsBE,CGfC,ANPA,CAAC,EAAE,CMOC,AJbd,CAAA,GC4BkB,EGfE,ANPA,EMOE,CNPF,GAAI,CENZ,EFMiB,CEN7B,YAAA;EC6BA,AHtBA,CGsBC,CD5BC,EDgCE,AD1BE,IC0BE,CChCC,GIaG,CJbC,CAAC,CAAC,AFME,CC0BD,EKnBE,ALmBA,AChCA,AFME,CMOD,AJbA,UFMY,CAAC,CMOD,CAAA,CAAE,INPM,CAAC;EGwBxC,AD7BA,AFMA,CENC,GFMG,CGuBJ,CAAA,AFGM,CD1BC,CAAC,EC0BE,CAAC,IEHX,AHvBe,CGuBf,AFGgB,AD1BA,IC0BI,CAAC,KEHX,CHvBiB,CAAC,CGuB5B,IHvBiC,CAAC,CAAC,EAAC,IGuBpC;ED3BA,EC4BE,AHvBA,EELF,CAAA,AFKK,CC0BC,CEHC,CGhBC,CAAC,ANPA,CMOC,CHgBC,AFGA,CEHC,ED5BZ,CC4Be,AFGA,AC/Bf,CC4BgB,AFGA,EEHE,CAAC,AFGA,CAAC,AD1BA,EGuBE,AFGA,CAAC,GEHG,AFGA,CEHC,AFGA,EAAE,CC/Bd,CD+BgB,CAAC,CC/BhC,CD+BkC,IEHI,CAAC,ID5BvB,CAAS,CC4BoB,CD5BpB,CC4BsB,EAAE,CAAC,EAAE;ID3BlD,AFKA,EGuBE,EGhBE,CAAC,CAAC,ALmBA,CEHC,AD3BL,AFIK,IGuBI,AFGA,AC9BL,CC2BM,AD3BL,GC2BQ,AFGA,CEHC,AFGA,EEHE,CAAC,AFGA,CAAC,EEHE,AFGA,AD1BA,CC0BC,AD1BA,CEJJ,CAAA,CC2BO,AFGA,AC9BL,CC2BM,GFGG,AC7B3B,AFG2B,CC0BC,CD1BC,EC0BE,AC7B3B,AFG2B,CC0BC,AC7B3B,CD6B4B,CAAC,AD1BA,CGuBC,AFGA,CEHC,AHvBA,CGuBC,CAAC,CAAC,AHvBA,CEH1B,AFG2B,CC0BC,AC7B3B,CAAC,CD6B4B,AC7B3B,EC0B6B,AFGA,CAAC,CEHC,AD1B3B,CD6B4B,AC7B3B,CC0B4B,CAAC,EAAE,AD1B3B,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAO;EAEhE,CAAC,IISI,CHgBC,IAAI,AFGA,CKnBC,GHgBG,AFGA,CEHC,AFGA,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CEHC,CAAC,CAAC,CAAC,CAAC,CAAC,AFGA,CEHC,EFGE,GEHG,CAAC,AFGA,CAAC,CEHC,EFGE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;EC3B3D,AFEA,IEFA,CAAA,CCyBM,AGhBA,CNPC,GGuBG,AGhBA,ALmBA,CEHE,AGhBD,GLmBG,AC5Bd,CCyBgB,AFGD,AC5Bf,CCyBiB,AGhBD,CAAC,CLmBC,CAAC,CAAC,CAAC,CAAC,AD1BA,CC0BC,AD1BA,CC0BC,CAAC,CKnBC,CHgBE,AGhBD,AJTf,CCyBiB,CAAC,CAAC,ADzB/B,AFE8B,CGuBE,CAAC,AHvBD,CGuBW,CAAC,CHvBT,CC0BC,CD1BC,EC0BE,CKnBC,AJT3B,AFE2B,CMOC,AJTnB,AFEmB,EC0BE,AC5BrB,CD4BsB,GAAG,CEHW,AFGV,CEHW,AFGV,CEHW,CAAC,CFGT,CEHW,AFGV,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW;ADzBvE,IEFI,IISI,EHgBE,CDzBC,CISC,CAAC,EJTE,CAAC,CCyBC,CGhBC,CAAC,GHgBG,ADzBA,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EISE,CAAA,CAAE,AJTA,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;AFNpE,EEOE,CAAC,IFPH,CMgBQ,ANhBR,IMgBY,CAAC,UNhBb,EMgByB,CAAC,ANhB1B,WMgBqC,GAAG,CNhBxC,GMgB4C,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAA,CAAE;ANNnE,EEFE,IAAA,CAAA,CISM,ALmBA,CD1BQ,GMOJ,CAAC,ALmBA,GC5BX,CD4Be,AC5Bf,AFEsB,CMON,ANPM,EC0BN,AD1BM,CMON,ELmBG,CAAC,EKnBG,ALmBD,GAAC,EC5BT,CD4BY,EC5B1B,KD4B0B,CKnBH,ALmBG,CKnBH,GJTR,CAAS,CISI,CAAA,AJTJ,IISI,CAAA,ALmBU,EAAE,EAAE,CKnBd,CAAL,CLmBoB,EAAE,WKnBtB,CAAA,KAAK,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EACjB,IAAI,CAAC,SAAS,EAAA,KAAA,CAAA,EAAA,CACjB,IAAI,CAAC,KAAK,CAAC,GAAG,EACd,CAAC,EACD,CAAA,CAAA,EAAA,OAAA,CAAA,eAAe,EAAC,oBAAA,CAAA,cAAc,CAAC,CAAA,EAAA,KAAA,CAAA,CAAA,EAAA,CAChC;ENXP,EEFE,EFEE,EMYE,ELcE,CC3BH,AFCI,CMYC,CAAC,CLcC,AD1Bc,CC0Bb,AC3BJ,CAAC,AFCkB,EC0BZ,CAAC,CAAC,CAAC,CKdC,ALcA,GKdG,ALcF,CKdE,ALcD,CKdC,CJbD,CIaC,ALcE,AC3BH,CAAE,IAAI,IAAI,CAAC,QIaV,CAAA,AJbmB,CAAC,CAAC,CAAC,IACxC,IAAI,CAAC,CIY0B,EAAA,CAAE,KJZnB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAO;EAEjE,AFDA,CECC,CCsBC,GHvBG,IGuBI,AHvBA,CC0BC,AD1BA,CC0BC,EEHE,AFGA,AD1BA,CAAC,EC0BA,AD1BE,CAAC,GAAG,aAAA,CAAA,SAAS,EAAE,EAAE,CAAC,EAAE;EGwBpC,ADtBA,CCsBC,CHvBC,EMYE,AJXJ,CAAA,EFDO,CMYC,ANZA,CMYC,ANZA,CC0BC,AD1BA,CC0BC,EAAE,AD1BA,CECb,CAAA,AFDe,EMYE,GAAG,ALcP,CAAA,GKdW,CAAC,GJXZ,EIWiB,ALcR,CKdS,AJX/B,EDyByB,CAAC,OCzBZ,CAAS,EIWqB,AJXrB,CIWqB,CAAE;EHa9C,EDvBE,AFDA,EMYE,CHYJ,CAAA,CHxBO,CMYC,CAAC,AJVJ,CDwBK,CD1BC,CAAC,CEEH,CAAC,CCsBV,AHxBe,CGwBf,AFEgB,AD1BA,EC0BE,AD1BA,CAAC,GAAG,CC0BC,EEFd,AGZgB,CJVH,CAAA,CCsBtB,AGZ4B,AJVJ,CIUK,GJVD,GFFN,CEEU,AFFV,CEEW,GCsBjC,KDtByC,CAAC,CAAC,CAAC,AFFV,EAAE,EEG/B,AFHiC,CAAC,EAAE,CEGhC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAO;EAEhE,CAAC,CCoBC,EHxBE,GGwBG,EHxBE,CC0BC,AD1BA,CGwBC,AHxBA,CGwBC,AHxBA,CAAC,CAAC,CGwBC,AHxBA,CGwBC,EAAE,AHxBA,CGwBC,EFEE,CEFC,CFEC,GEFG,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;EDlBpD,EIOE,EHYE,ADnBJ,CAAA,CIOM,ANZA,CAAC,EGwBE,AFEA,AD1BA,CMYC,ANZA,CMYC,EHYE,CAAC,ADnBd,CAAA,ECmBiB,CAAC,EAAE,CAAC,GAAG,IAAI,AGZA,CHYC,GGZG,GJPZ,CIOgB,CAAC,CJPrC,ECmBwC,CAAC,CAAC,CAAC,CAAC,IDnBvB,CAAS,CCmBoB,CDnBlB,CCmBoB,ADnBX,CIOY,CHYC,ADnBb,CCmBc,AGZA,EHYE;IDlBvD,EIOE,EHYE,AHxBA,CAAC,CMYC,CJNJ,AFNK,CGwBC,AHxBA,EMYE,CAAC,AJNL,CCkBM,ADlBL,CCkBM,SGZS,CAAC,CHYC,ADlBL,CCkBM,ADlBN,CCkBO,ADlBL,CCkBM,CAAC,CAAC,CAAC,ADjB3B,CIK4B,CAAC,EJLzB,CCiB4B,ADjB3B,CCiB4B,EAAE,KDjBtB,CIK4B,AJL3B,CIK4B,AJL3B,CAAC,CAAC,EIK6B,EJJ7C,EIIiD,CAAC,CJJ9C,CAAC,GIIkD,CAAC,KJJ1C,CAAC,CAAC,CAAC,EIIiD,CAAA,CAAE,AJHpE,CAAC,CIGqE,GJHjE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAO;EAEjD,CAAC,KCcK,AGZA,ANZA,IGwBI,AGZA,CHYE,AGZD,CNZC,EAAE,CGwBE,CAAC,AGZD,CAAC,ENZE,QGwBS,CAAC,AGZD,CHYE,AGZD,CHYE,CAAC,CAAC,CAAU,CAAC,EGZR,CAAC,UHYoB,AGZnB,CHYoB,CAAC,CAAC,AGZnB,CHYoB,CGZpB,CHYsB;EDb/D,IAAA,CAAA,CFVM,EGwBE,A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","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["import { Tile } from \"./tile\";\r\n\r\n// board coordinates type definition\r\nexport type gridCord = {\r\n  x: number;\r\n  y: number;\r\n  filled: boolean;\r\n  squareColor: string\r\n};\r\n//a single piece\r\ntype Piece = {\r\n  kind: 'piece',\r\n  pieceCords: Array<number[]>\r\n}\r\n//set of pieces\r\ntype PieceCollection = {\r\n  kind: 'pieceCollection',\r\n  pieceCords: Array<number[][]>\r\n}\r\n//wrapper containing all the pieces\r\nexport type PiecesWrapper = {\r\n  [piece_name: string]: PieceCollection | Piece\r\n}\r\n//possible offset cases of each tetris\r\nexport type PiecesOffsets = {\r\n  [piece_name: string]: Array<number[][]>\r\n}\r\n//tetris piece's letter to extract the relevant piece's set of offsets\r\nexport enum PieceOffset {\r\n  JLSTZ = \"JLSTZ\",\r\n  I = \"I\",\r\n  O = \"O\"\r\n}\r\nexport const CLOCK_MATRICES = {\r\n  CLOCKWISE: {x1: 0, x2: -1, y1: 1, y2: 0},\r\n  COUNTER_CLOCKWISE: {x1: 0, x2: 1, y1: -1, y2: 0}\r\n}\r\n// a piece column has either a tile or is empty\r\nexport type PieceColumn = Tile | 0;\r\n// Tetro piece holding a 3x3 dimension of tiles\r\ntype PieceRow = [PieceColumn, PieceColumn, PieceColumn]\r\nexport type PieceOfTiles = [PieceRow, [PieceColumn, Tile, PieceColumn], PieceRow];\r\n//tetromino object properties definition\r\nexport type PIECE_OBJECT = [\r\n  PIECE: number[][],\r\n  OFFSETS: number[][][]\r\n];\r\nexport const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nexport const subCanvas = document.getElementById(\"subCanvas\") as HTMLCanvasElement\r\nexport const cvsContext = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\nexport const subCanvasCtx = subCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\nexport const scoreEl = document.getElementById(\"score\") as HTMLSpanElement\r\nexport const resetBtn = document.getElementById(\"reset\") as HTMLButtonElement\r\n\r\n// generate 6-digit hexcode color value for each piece\r\ntype HexValues = \"0\"|\"1\"|\"2\"| \"3\"| \"4\"| \"5\"| \"6\"| \"7\"| \"8\"| \"9\"|\"10\"| \"A\"| \"B\"|\"C\"| \"D\"| \"E\"|\"F\"\r\nexport type Hexcode = HexValues[]\r\nexport const setOfHexvalues: Hexcode = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]","import { Game } from \".\";\r\nimport { GRID_COLUMNS, GRID_ROWS } from \"./tetrisBoard\";\r\nimport {Hexcode, gridCord} from \"./types&declarations\"\r\n\r\nexport function randomValue<T>(array: T[]): T {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n// dispalay game over text\r\nfunction displayGameover(ctx: CanvasRenderingContext2D){\r\n  ctx.fillStyle = \"#00000080\"\r\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n  ctx.font =  \"32px Arial Sans-serif\"\r\n  ctx.textAlign = 'center'\r\n  ctx.fillStyle = \"#000\"\r\n  ctx.fillText(\"Game Over!\", ctx.canvas.width / 2+2, ctx.canvas.height / 2+2)\r\n  ctx.fillStyle = \"#fff\"\r\n  ctx.fillText(\"Game Over!\", ctx.canvas.width / 2, ctx.canvas.height / 2)\r\n}\r\n// animate the tetris game using requesAnimationFrame func\r\nexport function createAnimation(currentGame: Game) {\r\n  let elapsedGameTime = 0;\r\n  function animate(timeStamp: number) {\r\n    const timeElapsed = timeStamp - elapsedGameTime;\r\n    elapsedGameTime = timeStamp;\r\n    currentGame.update(timeElapsed);\r\n    if (!currentGame.gameOver) {\r\n      currentGame.draw();\r\n      currentGame.animationToken = requestAnimationFrame(animate);\r\n    }else displayGameover(currentGame.ctx)\r\n  }\r\n  animate(0);\r\n}\r\n//true modulo operation that works for positive & negative integers\r\nexport function mod(x: number, m: number): number {\r\n  return ((x % m) + m) % m;\r\n}\r\n// generate random string of hex-color code\r\nexport function genHexColorCode(hexcode: Hexcode, len=6, str=\"\"): `#${string}`{\r\n  if (len < 1) return `#${str}`\r\n  const nextHexcode = randomValue(hexcode);\r\n  if (str.indexOf(nextHexcode) === -1){\r\n    str += nextHexcode\r\n    return genHexColorCode(hexcode, --len, str)\r\n  }\r\n  return genHexColorCode(hexcode, len, str)\r\n}\r\n\r\nexport function newBoard():gridCord[][] {\r\n  let board: gridCord[][] = []\r\n  for (let i = 0; i < GRID_ROWS; ++i) {\r\n    board[i] = [];\r\n    for (let j = 0; j < GRID_COLUMNS; ++j) {\r\n      board[i][j] = {\r\n        x: j,\r\n        y: i,\r\n        filled: false,\r\n        squareColor: \"transparent\"\r\n      };\r\n    }\r\n  }\r\n  return board\r\n}","import { gridCord } from \"./types&declarations\";\r\nimport { canvas } from \"./types&declarations\";\r\nimport { newBoard } from \"./utils\";\r\n\r\n//tetris board dimensions\r\nexport const TILE_SIZE = 30;\r\nexport const GRID_COLUMNS = canvas.width / TILE_SIZE;\r\nexport const GRID_ROWS = canvas.height / TILE_SIZE;\r\n\r\nexport class Board {\r\n  map: gridCord[][];\r\n  tileSize: number;\r\n  score = 0;\r\n  blankSpace = 4;\r\n\r\n  constructor(tileSize: number) {\r\n    this.map = newBoard();\r\n    this.tileSize = tileSize;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    // draw map bg color\r\n    ctx.fillStyle = \"#bca0dc\";\r\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n    //white space separator between tiles\r\n    ctx.fillStyle = \"#fff\";\r\n    for (let i = 0; i <= this.map[0].length; ++i) {\r\n      const x =\r\n        i * this.tileSize - this.blankSpace >= 0\r\n          ? i * this.tileSize - this.blankSpace\r\n          : 0;\r\n      ctx.fillRect(x, 0, this.blankSpace, ctx.canvas.height);\r\n    }\r\n    for (let j = 0; j <= this.map.length; ++j) {\r\n      const y =\r\n        j * this.tileSize - this.blankSpace >= 0\r\n          ? j * this.tileSize - this.blankSpace\r\n          : 0;\r\n      ctx.fillRect(0, y, ctx.canvas.width, this.blankSpace);\r\n    }\r\n\r\n    this.map.forEach((row) => {\r\n      row.forEach((column) => {\r\n        if (column.filled) {\r\n          ctx.fillStyle = column.squareColor;\r\n          ctx.fillRect(\r\n            column.x * this.tileSize,\r\n            column.y * this.tileSize,\r\n            this.tileSize,\r\n            this.tileSize\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  removeBoardRow() {\r\n    for (let i = 0; i < this.map.length; ++i) {\r\n      let isFilled = true;\r\n      for (let j: number = 0; j < this.map[i].length; ++j) {\r\n        if (!this.map[i][j].filled) {\r\n          isFilled = false;\r\n        }\r\n      }\r\n      if (isFilled) {\r\n        this.score += 2;\r\n        for (let k = i; k > 0; --k) {\r\n          for (let l = 0; l < this.map[k].length; ++l) {\r\n            this.map[k][l].filled = this.map[k - 1][l].filled;\r\n            this.map[k][l].squareColor = this.map[k - 1][l].squareColor;\r\n          }\r\n        }\r\n        for (let i = 0; i < GRID_COLUMNS; ++i) {\r\n          this.map[0][i] = {\r\n            x: i,\r\n            y: GRID_ROWS - 1,\r\n            filled: false,\r\n            squareColor: \"transparent\"\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { gridCord, CLOCK_MATRICES } from \"./types&declarations\";\r\nimport { GRID_COLUMNS, GRID_ROWS } from \"./tetrisBoard\";\r\n\r\nexport class Tile {\r\n  x: number;\r\n  y: number;\r\n  board: gridCord[][];\r\n\r\n  moveToRight(x: number = 1) {\r\n    this.x += x;\r\n  }\r\n  moveToleft(x: number = -1) {\r\n    this.x += x;\r\n  }\r\n  moveToBottom(y: number = 1) {\r\n    this.y += y;\r\n  }\r\n  moveToTop(y: number = 1) {\r\n    this.y -= y;\r\n  }\r\n  moveRight(x: number) {\r\n    return this.x + x < GRID_COLUMNS;\r\n  }\r\n  moveLeft(x: number) {\r\n    return this.x + x >= 0;\r\n  }\r\n  moveDown(y: number) {\r\n    return this.y + y < GRID_ROWS;\r\n  }\r\n  moveUp(y: number) {\r\n    return this.y + y >= 0;\r\n  }\r\n  isTopMostPos() {\r\n    return this.y < 0;\r\n  }\r\n\r\n  checkBottomTile(y: number) {\r\n    return (\r\n      this.isTopMostPos() ||\r\n      (this.moveDown(y) && !this.board[this.y + y][this.x].filled)\r\n    );\r\n  }\r\n  checkTopTile(y: number) {\r\n    return this.moveUp(-y) && !this.board[this.y - y][this.x].filled;\r\n  }\r\n  checkRightTile(x: number) {\r\n    return (\r\n      (this.isTopMostPos() && this.moveRight(x)) ||\r\n      (this.moveRight(x) && !this.board[this.y][this.x + x].filled)\r\n    );\r\n  }\r\n  checkLeftTile(x: number) {\r\n    return (\r\n      (this.isTopMostPos() && this.moveLeft(x)) ||\r\n      (this.moveLeft(x) && !this.board[this.y][this.x + x].filled)\r\n    );\r\n  }\r\n\r\n  checkBottomRightTile(x: number, y: number) {\r\n    return (\r\n      this.isTopMostPos() ||\r\n      (this.moveDown(-y) &&\r\n        this.moveRight(x) &&\r\n        !this.board[this.y - y][this.x + x].filled)\r\n    );\r\n  }\r\n  checkBottomLeftTile(x: number, y: number) {\r\n    return (\r\n      this.isTopMostPos() ||\r\n      (this.moveDown(-y) &&\r\n        this.moveLeft(x) &&\r\n        !this.board[this.y - y][this.x + x].filled)\r\n    );\r\n  }\r\n  checkTopRightTile(x: number, y: number) {\r\n    return (\r\n      this.moveUp(-y) &&\r\n      this.moveRight(x) &&\r\n      !this.board[this.y - y][this.x + x].filled\r\n    );\r\n  }\r\n  checkTopLeftTile(x: number, y: number) {\r\n    return (\r\n      this.moveUp(-y) &&\r\n      this.moveLeft(x) &&\r\n      !this.board[this.y - y][this.x + x].filled\r\n    );\r\n  }\r\n  checkPureRot() {\r\n    return (\r\n      this.moveRight(0) &&\r\n      this.moveLeft(0) &&\r\n      this.moveDown(0) &&\r\n      this.moveUp(0) &&\r\n      !this.board[this.y][this.x].filled\r\n    );\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D, sizeOfTile: number): void {\r\n    ctx.fillRect(\r\n      this.x * sizeOfTile,\r\n      this.y * sizeOfTile,\r\n      sizeOfTile,\r\n      sizeOfTile\r\n    );\r\n  }\r\n  rotateTile(centerTile: Tile, isClockwise: boolean): void {\r\n    const RELATIVE_POSITION = {\r\n      x: this.x - centerTile.x,\r\n      y: this.y - centerTile.y\r\n    };\r\n\r\n    const rotMatrix = {\r\n      x1: isClockwise\r\n        ? CLOCK_MATRICES.CLOCKWISE.x1\r\n        : CLOCK_MATRICES.COUNTER_CLOCKWISE.x1,\r\n      x2: isClockwise\r\n        ? CLOCK_MATRICES.CLOCKWISE.x2\r\n        : CLOCK_MATRICES.COUNTER_CLOCKWISE.x2,\r\n      y1: isClockwise\r\n        ? CLOCK_MATRICES.CLOCKWISE.y1\r\n        : CLOCK_MATRICES.COUNTER_CLOCKWISE.y1,\r\n      y2: isClockwise\r\n        ? CLOCK_MATRICES.CLOCKWISE.y2\r\n        : CLOCK_MATRICES.COUNTER_CLOCKWISE.y2\r\n    };\r\n\r\n    const rotationCord = {\r\n      x:\r\n        rotMatrix.x1 * RELATIVE_POSITION.x + rotMatrix.x2 * RELATIVE_POSITION.y,\r\n      y: rotMatrix.y1 * RELATIVE_POSITION.x + rotMatrix.y2 * RELATIVE_POSITION.y\r\n    };\r\n\r\n    this.x = rotationCord.x + centerTile.x;\r\n    this.y = rotationCord.y + centerTile.y;\r\n  }\r\n  constructor(x: number, y: number, board: gridCord[][]) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.board = board;\r\n  }\r\n}\r\n","import {GRID_COLUMNS } from \"./tetrisBoard\";\r\nimport { Tile } from \"./tile\";\r\nimport {\r\n  PieceOfTiles,\r\n  gridCord,\r\n  PIECE_OBJECT,\r\n} from \"./types&declarations\";\r\nimport { mod } from \"./utils\";\r\n\r\nexport class Piece {\r\n  currentPiece: number[][];\r\n  offsets: number[][][];\r\n  tetrominoes: PieceOfTiles;\r\n  centerPiece: Tile;\r\n  rotationIndex: number;\r\n  board: gridCord[][];\r\n  color: `#${string}`\r\n\r\n  constructor(\r\n    currentPiece: number[][],\r\n    offsets: number[][][],\r\n    board: gridCord[][],\r\n    rotationIndex: number,\r\n    color: `#${string}`\r\n  ) {\r\n    this.board = board;\r\n    this.currentPiece = currentPiece;\r\n    this.offsets = offsets;\r\n    this.tetrominoes = this.initMinos();\r\n    this.centerPiece = this.tetrominoes[1][1];\r\n    this.rotationIndex = rotationIndex;\r\n    this.color = color\r\n  }\r\n\r\n  initMinos(): PieceOfTiles {\r\n    return this.currentPiece.map((row, rowIndex) => {\r\n      return row.map((column, colIndex) => {\r\n        if (column) {\r\n          return new Tile(\r\n            Math.floor(GRID_COLUMNS / 2) + colIndex - 1,\r\n            rowIndex - 3,\r\n            this.board\r\n          );\r\n        }\r\n        return 0;\r\n      });\r\n    }) as PieceOfTiles;\r\n  }\r\n\r\n  checkBottom(): boolean {\r\n    let isMovable = true;\r\n    for (let i = 0; i < this.tetrominoes.length; ++i) {\r\n      for (let j = 0; j < this.tetrominoes[i].length; ++j) {\r\n        if (this.tetrominoes[i][j] === 0) continue;\r\n        if (!(this.tetrominoes[i][j] as Tile).checkBottomTile(1)) {\r\n          isMovable = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return isMovable;\r\n  }\r\n\r\n  checkRight(): boolean {\r\n    for (let i = 0; i < this.tetrominoes.length; ++i) {\r\n      for (let j = 0; j < this.tetrominoes[i].length; ++j) {\r\n        if (this.tetrominoes[i][j] === 0) continue;\r\n        if (!(this.tetrominoes[i][j] as Tile).checkRightTile(1)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  checkLeft(): boolean {\r\n    for (let i = 0; i < this.tetrominoes.length; ++i) {\r\n      for (let j = 0; j < this.tetrominoes[i].length; ++j) {\r\n        if (this.tetrominoes[i][j] === 0) continue;\r\n        if (!(this.tetrominoes[i][j] as Tile).checkLeftTile(-1)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  checkGameover(): boolean {\r\n    const boardTop = this.board[0]\r\n    for(let i=0; i < boardTop.length; ++i){\r\n      if (boardTop[i].filled){\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  dropPiece(isMoveable: boolean) {\r\n    if (!isMoveable){\r\n      for(let i=0; i < this.tetrominoes.length; ++i){\r\n        for(let j=0; j < this.tetrominoes[i].length; ++j){\r\n          if (this.tetrominoes[i][j] === 0) continue;\r\n          const {x, y} = (this.tetrominoes[i][j] as Tile)\r\n          if (y >= 0) {\r\n            this.board[y][x].filled = true\r\n            this.board[y][x].squareColor = this.color          \r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  playNextPiece(nextPiece: PIECE_OBJECT): void {\r\n    this.currentPiece = nextPiece[0];\r\n    this.offsets = nextPiece[1];\r\n    this.tetrominoes = this.initMinos();\r\n    this.centerPiece = this.tetrominoes[1][1];\r\n    this.rotationIndex = 0;\r\n  }\r\n\r\n  rotatePiece(isClockWise: boolean, willOffset: boolean): void {\r\n    const oldRotIndex = this.rotationIndex;\r\n    this.rotationIndex += isClockWise ? 1 : -1;\r\n    this.rotationIndex = mod(this.rotationIndex, 4);\r\n    this.tetrominoes.forEach((row) => {\r\n      row.forEach((column) => {\r\n        if (column && column !== this.centerPiece) {\r\n          column.rotateTile(this.centerPiece, isClockWise);\r\n        }\r\n      });\r\n    });\r\n    if (!willOffset) {\r\n      return;\r\n    }\r\n    const canOffset = this.shouldOffset(oldRotIndex, this.rotationIndex);\r\n\r\n    if (!canOffset) {\r\n      this.rotatePiece(!isClockWise, false);\r\n      return;\r\n    }\r\n  }\r\n\r\n  shouldOffset(origIndex: number, newindex: number): boolean {\r\n    let shouldMove = false;\r\n    let endOffset: number[] = [];\r\n    for (let testIndex = 0; testIndex < this.offsets.length; ++testIndex) {\r\n      const offsetVal1 = this.offsets[testIndex][origIndex];\r\n      const offsetVal2 = this.offsets[testIndex][newindex];\r\n      endOffset[0] = offsetVal1[0] - offsetVal2[0];\r\n      endOffset[1] = offsetVal1[1] - offsetVal2[1];\r\n      if (this.canOffset(endOffset)) {\r\n        shouldMove = true;\r\n        break;\r\n      }\r\n    }\r\n    if (shouldMove) this.offsetMove(endOffset);\r\n    return shouldMove;\r\n  }\r\n\r\n  canOffset(offsetCord: number[]): boolean {\r\n    return this.tetrominoes.every((row) => {\r\n      return row.every((column) => {\r\n        if (column) {\r\n          if (\r\n            offsetCord[0] === 0 &&\r\n            offsetCord[1] === 0 &&\r\n            column.checkPureRot()\r\n          )\r\n            return true;\r\n\r\n          if (\r\n            offsetCord[0] > 0 &&\r\n            offsetCord[1] > 0 &&\r\n            column.checkTopRightTile(offsetCord[0], offsetCord[1])\r\n          )\r\n            return true;\r\n          if (\r\n            offsetCord[0] < 0 &&\r\n            offsetCord[1] < 0 &&\r\n            column.checkBottomLeftTile(offsetCord[0], offsetCord[1])\r\n          )\r\n            return true;\r\n          if (\r\n            offsetCord[0] === 0 &&\r\n            offsetCord[1] < 0 &&\r\n            column.moveLeft(0) &&\r\n            column.moveRight(0) &&\r\n            column.checkBottomTile(-offsetCord[1])\r\n          )\r\n            return true;\r\n          if (\r\n            offsetCord[1] === 0 &&\r\n            offsetCord[0] < 0 &&\r\n            column.moveUp(0) &&\r\n            column.moveDown(0) &&\r\n            column.checkLeftTile(offsetCord[0])\r\n          )\r\n            return true;\r\n\r\n          if (\r\n            offsetCord[0] > 0 &&\r\n            offsetCord[1] === 0 &&\r\n            column.moveUp(0) &&\r\n            column.moveDown(0) &&\r\n            column.checkRightTile(offsetCord[0])\r\n          )\r\n            return true;\r\n\r\n          if (\r\n            offsetCord[0] === 0 &&\r\n            offsetCord[1] > 0 &&\r\n            column.moveRight(0) &&\r\n            column.moveLeft(0) &&\r\n            column.checkTopTile(offsetCord[1])\r\n          )\r\n            return true;\r\n\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    });\r\n  }\r\n\r\n  offsetMove(offsetCord: number[]) {\r\n    this.tetrominoes.forEach((row) => {\r\n      row.forEach((column) => {\r\n        if (column) {\r\n          const [x, y] = [...offsetCord];\r\n          if (x < 0) column.moveToleft(x);\r\n          else if (x >= 0) column.moveToRight(x);\r\n          if (y < 0) column.moveToBottom(-y);\r\n          else if (y >= 0) column.moveToTop(y);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}","import { Game } from \"./index\";\r\n\r\nexport class Input {\r\n  constructor(game: Game) {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      switch (e.key) {\r\n        case \"ArrowRight\":\r\n        case \"ArrowLeft\":\r\n        case \"ArrowDown\":\r\n        case \"x\":\r\n        case \"s\":\r\n          if (!game.playerinput.includes(e.key)) game.playerinput.push(e.key);\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    });\r\n    window.addEventListener(\"keyup\", (e) => {\r\n      switch (e.key) {\r\n        case \"ArrowRight\":\r\n        case \"ArrowLeft\":\r\n        case \"ArrowDown\":\r\n        case \"x\":\r\n        case \"s\":\r\n          if (game.playerinput.includes(e.key))\r\n            game.playerinput.splice(game.playerinput.indexOf(e.key), 1);\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n    });\r\n  }\r\n}\r\n","import {\r\n  PIECE_OBJECT,\r\n  PieceOffset,\r\n  PiecesOffsets,\r\n  PiecesWrapper\r\n} from \"./types&declarations\";\r\nimport { randomValue } from \"./utils\";\r\n\r\nexport const OFFSETS: PiecesOffsets = {\r\n  JLSTZ: [\r\n    [\r\n      [0, 0],\r\n      [0, 0],\r\n      [0, 0],\r\n      [0, 0]\r\n    ],\r\n    [\r\n      [0, 0],\r\n      [1, 0],\r\n      [0, 0],\r\n      [-1, 0]\r\n    ],\r\n    [\r\n      [0, 0],\r\n      [1, -1],\r\n      [0, 0],\r\n      [-1, -1]\r\n    ],\r\n    [\r\n      [0, 0],\r\n      [0, 2],\r\n      [0, 0],\r\n      [0, 2]\r\n    ],\r\n    [\r\n      [0, 0],\r\n      [1, 2],\r\n      [0, 0],\r\n      [-1, 2]\r\n    ]\r\n  ],\r\n  I: [\r\n    [\r\n      [0, 0],\r\n      [-1, 0],\r\n      [-1, 1],\r\n      [0, 1]\r\n    ],\r\n    [\r\n      [-1, 0],\r\n      [0, 0],\r\n      [1, 1],\r\n      [0, 1]\r\n    ],\r\n    [\r\n      [2, 0],\r\n      [0, 0],\r\n      [-2, 1],\r\n      [0, 1]\r\n    ],\r\n    [\r\n      [-1, 0],\r\n      [0, 1],\r\n      [1, 0],\r\n      [0, -1]\r\n    ],\r\n    [\r\n      [2, 0],\r\n      [0, -2],\r\n      [-2, 0],\r\n      [0, 2]\r\n    ]\r\n  ],\r\n  O: [\r\n    [\r\n      [0, 0],\r\n      [0, -1],\r\n      [-1, -1],\r\n      [-1, 0]\r\n    ]\r\n  ]\r\n};\r\n\r\nexport const PIECES: PiecesWrapper = {\r\n  JLSTZ: {\r\n    pieceCords: [\r\n      [\r\n        [1, 0, 0],\r\n        [1, 1, 1],\r\n        [0, 0, 0]\r\n      ],\r\n      [\r\n        [0, 0, 1],\r\n        [1, 1, 1],\r\n        [0, 0, 0]\r\n      ],\r\n      [\r\n        [0, 1, 1],\r\n        [1, 1, 0],\r\n        [0, 0, 0]\r\n      ],\r\n      [\r\n        [0, 1, 0],\r\n        [1, 1, 1],\r\n        [0, 0, 0]\r\n      ],\r\n      [\r\n        [1, 1, 0],\r\n        [0, 1, 1],\r\n        [0, 0, 0]\r\n      ]\r\n    ],\r\n    kind: \"pieceCollection\"\r\n  },\r\n  O: {\r\n    pieceCords: [\r\n      [0, 1, 1],\r\n      [0, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    kind: \"piece\"\r\n  },\r\n  I: {\r\n    pieceCords: [\r\n      [0, 0, 0],\r\n      [1, 1, 1],\r\n      [0, 0, 0]\r\n    ],\r\n    kind: \"piece\"\r\n  }\r\n};\r\n\r\nexport function initiatePiece(): PIECE_OBJECT {\r\n  const chosenPieceLetter = randomValue(Object.keys(PieceOffset));\r\n  const pieceOffsets = OFFSETS[chosenPieceLetter];\r\n  let chosenPiece = PIECES[chosenPieceLetter];\r\n\r\n  if (chosenPiece.kind === \"pieceCollection\") {\r\n    return [randomValue(chosenPiece.pieceCords), pieceOffsets];\r\n  }\r\n  return [chosenPiece.pieceCords, pieceOffsets];\r\n}\r\n","import {\n  cvsContext,\n  subCanvasCtx,\n  canvas,\n  PIECE_OBJECT,\n  setOfHexvalues,\n  scoreEl,\n  resetBtn\n} from \"./types&declarations\";\nimport { Board, TILE_SIZE } from \"./tetrisBoard\";\nimport { Piece } from \"./currentPiece\";\nimport { Input } from \"./inputHandler\";\nimport { createAnimation, genHexColorCode, newBoard } from \"./utils\";\nimport { initiatePiece } from \"./piecesController\";\n\nexport class Game {\n  ctx: CanvasRenderingContext2D;\n  subCvsCtx: CanvasRenderingContext2D;\n  board: Board;\n  piece: Piece;\n  nextPiece: PIECE_OBJECT;\n  inputClass: Input;\n  playerinput: string[] = [];\n  gameSpeedPerMiliSec: number;\n  gameTimeInterval: number;\n  miliSecPerFrames: number;\n  frameTimeInterval: number;\n  scoreElement = scoreEl;\n  gameOver: boolean;\n  animationToken = 0;\n\n  update(timePassed: number): void {\n    this.gameTimeInterval += timePassed;\n    this.frameTimeInterval += timePassed;\n\n    if (this.gameTimeInterval >= this.gameSpeedPerMiliSec) {\n      //rotating clockwise or counter-clockwise based on the key pressed\n      if (this.playerinput.includes(\"s\")) this.piece.rotatePiece(true, true);\n      if (this.playerinput.includes(\"x\")) this.piece.rotatePiece(false, true);\n\n      // keep the piece dropping or fix it on floor\n      const pieceIsMoving = this.piece.checkBottom();\n      if (pieceIsMoving) {\n        this.piece.tetrominoes.forEach((row) => {\n          row.forEach((column) => {\n            if (column) {\n              column.moveToBottom();\n            }\n          });\n        });\n      } else {\n        this.piece.dropPiece(pieceIsMoving);\n        this.board.removeBoardRow();\n        this.scoreElement.textContent = this.board.score.toString();\n        this.piece = new Piece(\n          ...this.nextPiece,\n          this.board.map,\n          0,\n          genHexColorCode(setOfHexvalues)\n        );\n        this.nextPiece = initiatePiece();\n      }\n      this.gameOver = this.piece.checkGameover();\n      this.gameTimeInterval = 0;\n    }\n    if (this.frameTimeInterval >= this.miliSecPerFrames) {\n      if (this.playerinput.includes(\"ArrowRight\") && this.piece.checkRight()) {\n        this.piece.tetrominoes.forEach((row) => {\n          row.forEach((column) => {\n            if (column) column.moveToRight();\n          });\n        });\n      }\n      if (this.playerinput.includes(\"ArrowLeft\") && this.piece.checkLeft()) {\n        this.piece.tetrominoes.forEach((row) => {\n          row.forEach((column) => {\n            if (column) column.moveToleft();\n          });\n        });\n      }\n      if (this.playerinput.includes(\"ArrowDown\") && this.piece.checkBottom()) {\n        this.piece.tetrominoes.forEach((row) => {\n          row.forEach((column) => {\n            if (column) column.moveToBottom();\n          });\n        });\n      }\n      this.frameTimeInterval = 0;\n    }\n  }\n\n  draw(): void {\n    this.ctx.clearRect(0, 0, canvas.width, canvas.height);\n    //draw fixed squares on board\n    this.board.draw(this.ctx);\n    //draw current piece\n    this.piece.tetrominoes.forEach((row) => {\n      row.forEach((column) => {\n        if (column) {\n          this.ctx.fillStyle = this.piece.color;\n          column.draw(this.ctx, this.board.tileSize);\n        }\n      });\n    });\n    this.drawNextPiece();\n  }\n\n  drawNextPiece() {\n    this.subCvsCtx.clearRect(\n      0,\n      0,\n      subCanvasCtx.canvas.width,\n      subCanvasCtx.canvas.height\n    );\n    this.subCvsCtx.fillStyle = \"#ef709b\";\n    this.subCvsCtx.fillRect(\n      0,\n      0,\n      this.subCvsCtx.canvas.width,\n      this.subCvsCtx.canvas.height\n    );\n    this.subCvsCtx.fillStyle = \"#000\";\n    this.nextPiece[0].forEach((row, rowIndex) => {\n      row.forEach((column, colIndex) => {\n        if (column) {\n          this.subCvsCtx.fillRect(\n            20 * (colIndex + 1),\n            20 * (rowIndex + 1),\n            20,\n            20\n          );\n        }\n      });\n    });\n  }\n  constructor(\n    ctx: CanvasRenderingContext2D,\n    subCvsCtx: CanvasRenderingContext2D,\n    board: Board,\n    tileSize: number\n  ) {\n    this.ctx = ctx;\n    this.subCvsCtx = subCvsCtx;\n    this.board = board;\n    this.piece = new Piece(\n      ...initiatePiece(),\n      this.board.map,\n      0,\n      genHexColorCode(setOfHexvalues)\n    );\n    this.nextPiece = initiatePiece();\n    this.inputClass = new Input(this);\n    this.gameSpeedPerMiliSec = 1000 / 5;\n    this.miliSecPerFrames = 2000 / 16.67;\n    this.gameTimeInterval = 0;\n    this.frameTimeInterval = 0;\n    this.gameOver = false;\n  }\n}\nlet newGame = new Game(\n  cvsContext,\n  subCanvasCtx,\n  new Board(TILE_SIZE),\n  TILE_SIZE\n);\ncreateAnimation(newGame);\n\nresetBtn.addEventListener(\"click\", () => {\n  cancelAnimationFrame(newGame.animationToken);\n  scoreEl.textContent = \"0\";\n  newGame = new Game(cvsContext, subCanvasCtx, new Board(TILE_SIZE), TILE_SIZE);\n  createAnimation(newGame);\n});\n"]}